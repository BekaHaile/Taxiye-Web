{"ast":null,"code":"import _defineProperty from \"/home/kal/Documents/Development/Taxiye-front/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/kal/Documents/Development/Taxiye-front/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport { Button } from \"../form/buttons/primary-button\";\nimport Typography from \"@material-ui/core/Typography\";\nvar steps = [\"Select campaign settings\", \"Create an ad group\", \"Create an ad\"];\nexport default function HorizontalLinearStepper() {\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeStep = _React$useState2[0],\n      setActiveStep = _React$useState2[1];\n\n  var _React$useState3 = React.useState(new Set()),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      skipped = _React$useState4[0],\n      setSkipped = _React$useState4[1];\n\n  var isStepOptional = function isStepOptional(step) {\n    return step === 1;\n  };\n\n  var isStepSkipped = function isStepSkipped(step) {\n    return skipped.has(step);\n  };\n\n  var handleNext = function handleNext() {\n    var newSkipped = skipped;\n\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped[\"delete\"](activeStep);\n    }\n\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep + 1;\n    });\n    setSkipped(newSkipped);\n  };\n\n  var handleBack = function handleBack() {\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep - 1;\n    });\n  };\n\n  var handleSkip = function handleSkip() {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep + 1;\n    });\n    setSkipped(function (prevSkipped) {\n      var newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  var handleReset = function handleReset() {\n    setActiveStep(0);\n  };\n\n  return /*#__PURE__*/_jsxs(Box, {\n    children: [/*#__PURE__*/_jsx(Stepper, {\n      activeStep: activeStep,\n      children: steps.map(function (label, index) {\n        var stepProps = {};\n        var labelProps = {};\n        return /*#__PURE__*/_jsx(Step, _objectSpread(_objectSpread({}, stepProps), {}, {\n          children: /*#__PURE__*/_jsx(StepLabel, _objectSpread(_objectSpread({}, labelProps), {}, {\n            children: label\n          }))\n        }), label);\n      })\n    }), activeStep === steps.length ? /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [/*#__PURE__*/_jsx(Typography, {\n        children: \"All steps completed - you're finished\"\n      }), /*#__PURE__*/_jsx(Button, {\n        onClick: handleReset,\n        children: \"Reset\"\n      })]\n    }) : /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [/*#__PURE__*/_jsxs(Typography, {\n        children: [\"Step \", activeStep + 1]\n      }), /*#__PURE__*/_jsx(Button, {\n        onClick: handleNext,\n        children: activeStep === steps.length - 1 ? \"Finish\" : \"Next\"\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}