{"ast":null,"code":"var _jsxFileName = \"/home/kal/Documents/Development/sewmehon-films/src/Components/Map/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport { GoogleMapProps } from 'react-google-maps/lib/components/GoogleMap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Map({\n  a,\n  places\n}) {\n  _s();\n\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, { ...a,\n    defaultZoom: 10,\n    defaultCenter: {\n      lat: 9,\n      lng: 39\n    },\n    children: [places.map(place => {\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: place.lat,\n          lng: place.lng\n        },\n        onClick: () => {\n          setSelectedLocation(place);\n        }\n      }, place.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 21\n      }, this);\n    }), selectedLocation && /*#__PURE__*/_jsxDEV(InfoWindow, {\n      position: {\n        lat: selectedLocation.lat,\n        lng: selectedLocation.lng\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Map, \"pGedlDpRVZiPTL4140bC/BFKe+Y=\");\n\n_c = Map;\nconst WrappedMap = withScriptjs(_c2 = withGoogleMap(Map));\n_c3 = WrappedMap;\nexport default WrappedMap;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"WrappedMap$withScriptjs\");\n$RefreshReg$(_c3, \"WrappedMap\");","map":{"version":3,"sources":["/home/kal/Documents/Development/sewmehon-films/src/Components/Map/index.js"],"names":["React","useState","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","GoogleMapProps","Map","a","places","selectedLocation","setSelectedLocation","lat","lng","map","place","name","WrappedMap"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,SAAtC,EAAiDC,MAAjD,EAAyDC,UAAzD,QAA2E,mBAA3E;AACA,SAASC,cAAT,QAA+B,4CAA/B;;;AAGA,SAASC,GAAT,CAAa;AAAEC,EAAAA,CAAF;AAAKC,EAAAA;AAAL,CAAb,EAA4B;AAAA;;AACxB,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CX,QAAQ,CAAC,IAAD,CAAxD;AACA,sBACI,QAAC,SAAD,OACQQ,CADR;AAEI,IAAA,WAAW,EAAE,EAFjB;AAGI,IAAA,aAAa,EAAE;AAAEI,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,GAAG,EAAE;AAAf,KAHnB;AAAA,eAMKJ,MAAM,CAACK,GAAP,CAAWC,KAAK,IAAI;AACjB,0BAEI,QAAC,MAAD;AAEI,QAAA,QAAQ,EAAE;AAAEH,UAAAA,GAAG,EAAEG,KAAK,CAACH,GAAb;AAAkBC,UAAAA,GAAG,EAAEE,KAAK,CAACF;AAA7B,SAFd;AAGI,QAAA,OAAO,EAAE,MAAM;AACXF,UAAAA,mBAAmB,CAACI,KAAD,CAAnB;AACH;AALL,SACSA,KAAK,CAACC,IADf;AAAA;AAAA;AAAA;AAAA,cAFJ;AAUH,KAXA,CANL,EAkBKN,gBAAgB,iBACb,QAAC,UAAD;AACA,MAAA,QAAQ,EAAE;AAAEE,QAAAA,GAAG,EAAEF,gBAAgB,CAACE,GAAxB;AAA6BC,QAAAA,GAAG,EAAEH,gBAAgB,CAACG;AAAnD;AADV;AAAA;AAAA;AAAA;AAAA,YAnBR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6BH;;GA/BQN,G;;KAAAA,G;AAiCT,MAAMU,UAAU,GAAGhB,YAAY,OAACC,aAAa,CAACK,GAAD,CAAd,CAA/B;MAAMU,U;AAEN,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport { GoogleMapProps } from 'react-google-maps/lib/components/GoogleMap';\n\n\nfunction Map({ a, places }) {\n    const [selectedLocation, setSelectedLocation] = useState(null);\n    return (\n        <GoogleMap\n            {...a}\n            defaultZoom={10}\n            defaultCenter={{ lat: 9, lng: 39 }}\n\n        >\n            {places.map(place => {\n                return (\n\n                    <Marker\n                        key={place.name}\n                        position={{ lat: place.lat, lng: place.lng }}\n                        onClick={() => {\n                            setSelectedLocation(place);\n                        }}\n                    />\n                );\n            })}\n            {selectedLocation&& (\n                <InfoWindow \n                position={{ lat: selectedLocation.lat, lng: selectedLocation.lng }}\n                >\n\n                </InfoWindow>\n            )}\n\n        </GoogleMap>\n    );\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\nexport default WrappedMap;"]},"metadata":{},"sourceType":"module"}